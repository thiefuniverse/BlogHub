#!usr/bin/env python3
# encoding: utf-8

import pystache

class MarkdownBuilder:
    def __init__(self):
        self.article = ""
        self.version_info = "> This is generated by [BlogLinker](https://github.com/thiefuniverse/BlogLinker/) üêç"

    def renderTemplate(self, template_str, var_dict):
        self.article += "\n"
        self.article += pystache.render(template_str, var_dict)

    def renderTemplateFile(self, template_file, var_dict):
        with open(template_file) as f:
            template_str = f.read()
        self.article += "\n"        
        self.article += pystache.render(template_str, var_dict)

    def printArticle(self):
        print("markdown maker print:")
        print(self.getArticle())

    def getArticle(self):
        return self.article

    def clearArticle(self):
        self.article = ""

    def saveFile(self, save_file):
        with open(save_file, "w") as ws:
            ws.write(self.article)

if __name__ == "__main__":
    mark = MarkdownBuilder()
    var_dc = {
        'blog_title':'This is one title.',
        'blog_url':'http://www.baidu.com',
        'blog_generated_info':'This is generated by [BlogLinker](https://github.com/thiefuniverse/BlogLinker/) üêç'
    }
    mark.renderTemplateFile('blog_markdown.mustache', var_dc)
    mark.printArticle()
    # with clear
    mark.clearArticle()
    mark.renderTemplate('# [{{blog_title}}] ({{blog_url}}) \n{{blog_content}}\n\n {{blog_generated_info}}', var_dc)
    mark.printArticle()
    mark.clearArticle()


    # no clear
    mark.renderTemplateFile('blog_markdown.mustache', var_dc)
    mark.renderTemplateFile('blog_markdown.mustache', var_dc)
    mark.printArticle()